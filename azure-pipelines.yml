trigger:
  - main

variables:
  - group: script_variables

stages:

# 🚀 START  EC2 INSTANCE
- stage: StartEC2
  jobs:
  - job: StartJob
    pool: Default

    steps:
    - script: |
        chmod +x start_script.sh
        ./start_script.sh
      name: setip
      displayName: "Start EC2 Instance"
      continueOnError: false

    - script: echo "##vso[task.setvariable variable=EC2_PUBLIC_IP;isOutput=true]$(setip.EC2_PUBLIC_IP)"
      displayName: "Set EC2 Public IP"

# 🚢 DEPLOY TO EC2
- stage: DeployApp
  dependsOn: StartEC2
  condition: succeeded()
  variables:
    EC2_PUBLIC_IP: $[ stageDependencies.StartEC2.StartJob.outputs['setip.EC2_PUBLIC_IP'] ]

  jobs:
  - job: DeployJob
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent01
    steps:
    - checkout: self
    - script: |
        echo "Deploying NGINX to EC2 at: $EC2_PUBLIC_IP"

        # Write SSH key
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > awsac4.pem
        chmod 600 awsac4.pem

        # Connect to EC2 and deploy the app
        ssh -o StrictHostKeyChecking=no -i awsac4.pem ubuntu@$EC2_PUBLIC_IP << EOF
          echo "Connected to EC2. Installing Docker and running container..."
          sudo apt update && sudo apt install -y docker.io
          sudo docker stop my_app || true
          sudo docker rm my_app || true
          sudo docker pull $DOCKER_IMAGE
          sudo docker run -d -p 8080:8080 --name my_app $DOCKER_IMAGE
        EOF
      displayName: "Deploy NGINX App to EC2"

# 🛑 STOP EC2  INSTANCE
- stage: StopEC2
  dependsOn: DeployApp
  condition: succeeded()
  jobs:
  - job: StopJob
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent01
    steps:
    - script: |
        chmod +x stop_script.sh
        ./stop_script.sh
      displayName: "Stop EC2 Instance"

# ✅ SUCCESS NOTIFICATION
- stage: SuccessNotification
  dependsOn: [StartEC2, DeployApp, StopEC2]
  condition: succeeded()
  jobs:
  - job: NotifySuccess
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent01
    steps:
    - script: echo "Pipeline executed successfully! 🎉"

# ❌ FAILURE NOTIFICATION
- stage: FailureNotification
  dependsOn: [StartEC2, DeployApp, StopEC2]
  condition: failed()
  jobs:
  - job: NotifyFailure
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent01
    steps:
    - script: echo "Pipeline failed! 🚨"

