trigger:
  - main

variables:
  - group: DockerHubVariables

stages:

# 🚀 START EC2 INSTANCE
- stage: StartEC2
  jobs:
  - job: StartJob
    pool: Default
    steps:
    - script: |
        chmod +x start_script.sh
        ./start_script.sh
      displayName: "Start EC2 Instance"

# 🏗  BUILD & PUSH DOCKER IMAGE
- stage: BuildAndPush
  dependsOn: StartEC2
  condition: succeeded()
  jobs:
  - job: BuildJob
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent3
    steps:
    - checkout: self
    - script: |
        docker build -t $(DOCKER_IMAGE) .
        echo "$(DOCKERHUB_PASSWORD)" | docker login -u "$(DOCKERHUB_USERNAME)" --password-stdin
        docker push $(DOCKER_IMAGE)
      displayName: "Build and Push Docker Image"

# 🚢 DEPLOY TO EC2
- stage: DeployApp
  dependsOn: BuildAndPush
  condition: succeeded()
  variables:
    EC2_PUBLIC_IP: $[ dependencies.StartEC2.outputs['StartJob.setip.EC2_PUBLIC_IP'] ]
  jobs:
  - job: DeployJob
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent3
    steps:
    - checkout: self
    - script: |
        echo "$(SSH_PRIVATE_KEY)" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$(EC2_PUBLIC_IP) << 'EOF'
          sudo apt update && sudo apt install -y docker.io
          sudo docker stop my_app || true
          sudo docker rm my_app || true
          sudo docker pull $(DOCKER_IMAGE)
          sudo docker run -d -p 8080:8080 --name my_app $(DOCKER_IMAGE)
        EOF
      displayName: "Deploy NGINX App to EC2"

# 🛑 STOP EC2 INSTANCE
- stage: StopEC2
  dependsOn: DeployApp
  condition: succeeded()
  jobs:
  - job: StopJob
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent3
    steps:
    - script: |
        chmod +x stop_script.sh
        ./stop_script.sh
      displayName: "Stop EC2 Instance"

# ✅ SUCCESS NOTIFICATION
- stage: SuccessNotification
  dependsOn: [StartEC2, BuildAndPush, DeployApp, StopEC2]
  condition: succeeded()
  jobs:
  - job: NotifySuccess
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent3
    steps:
    - script: echo "Pipeline executed successfully! 🎉"

# ❌ FAILURE NOTIFICATION
- stage: FailureNotification
  dependsOn: [StartEC2, BuildAndPush, DeployApp, StopEC2]
  condition: failed()
  jobs:
  - job: NotifyFailure
    pool:
      name: Default
      demands:
        - Agent.Name -equals agent3
    steps:
    - script: echo "Pipeline failed! 🚨"

