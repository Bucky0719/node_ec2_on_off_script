trigger:
  - main  # Runs pipeline when code is pushed to 'main' branch

variables:
- group: DockerHubVariables  # Load variables from Azure DevOps UI

stages:
# 🚀 START EC2 INSTANCE
- stage: StartEC2
  displayName: "Start EC2 Instance"
  jobs:
  - job: StartJob
    displayName: "Start EC2"
    pool:
      name: "Default"
      demands:
        - Agent.Name -equals agent3
    steps:
    - script: |
       chmod +x start_script.sh
       ./start_script.sh
       export EC2_PUBLIC_IP=$(aws ec2 describe-instances \
         --filters "Name=instance-state-name,Values=running" \
         --query "Reservations[*].Instances[*].PublicIpAddress" \
         --output text)
       echo "##vso[task.setvariable variable=EC2_PUBLIC_IP;]$EC2_PUBLIC_IP"
      displayName: "Start EC2 and Fetch Public IP"


# 🏗 BUILD & PUSH DOCKER IMAGE
- stage: BuildAndPush
  displayName: "Build & Push Docker Image"
  dependsOn: StartEC2
  condition: succeeded()
  jobs:
  - job: BuildJob
    displayName: "Build & Push Docker Image"
    pool:
      name: "Default"
      demands:
        - Agent.Name -equals agent3
    steps:
    - checkout: self
    - script: |
        docker build -t $(DOCKER_IMAGE) .
        echo "$(DOCKERHUB_PASSWORD)" | docker login -u "$(DOCKERHUB_USERNAME)" --password-stdin
        docker push $(DOCKER_IMAGE)
      displayName: "Build & Push Docker Image"

# 🚀 DEPLOY APPLICATION ON EC2
- stage: DeployApp
  displayName: "Deploy Node.js App"
  dependsOn: BuildAndPush
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: "Deploy App on EC2"
    pool:
      name: "Default"
      demands:
        - Agent.Name -equals agent3
    steps:
    - checkout: self
    - script: |
        echo "$(SSH_PRIVATE_KEY)" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
        sudo apt update && sudo apt install -y docker.io
        sudo docker stop my_app || true
        sudo docker rm my_app || true
        sudo docker pull $(DOCKER_IMAGE)
        sudo docker run -d -p 8080:8080 --name my_app $(DOCKER_IMAGE)
        EOF
      displayName: "Deploy App on EC2"

# 🛑 STOP EC2 INSTANCE
- stage: StopEC2
  displayName: "Stop EC2 Instance"
  dependsOn: DeployApp
  condition: succeeded()
  jobs:
  - job: StopJob
    displayName: "Stop EC2"
    pool:
      name: "Default"
      demands:
        - Agent.Name -equals agent3
    steps:
    - script: |
        chmod +x stop_script.sh
        ./stop_script.sh
      displayName: "Executing Stop EC2 Script"

# ✅ SUCCESS NOTIFICATION
- stage: SuccessNotification
  displayName: "Notify on Success"
  dependsOn: [StartEC2, BuildAndPush, DeployApp, StopEC2]
  condition: succeeded()
  jobs:
  - job: NotifySuccess
    displayName: "Send Success Notification"
    pool:
      name: "Default"
      demands:
        - Agent.Name -equals agent3
    steps:
    - script: echo "Pipeline executed successfully! 🎉"
      displayName: "Notify Success"

# ❌ FAILURE NOTIFICATION
- stage: FailureNotification
  displayName: "Notify on Failure"
  dependsOn: [StartEC2, BuildAndPush, DeployApp, StopEC2]
  condition: failed()
  jobs:
  - job: NotifyFailure
    displayName: "Send Failure Notification"
    pool:
      name: "Default"
      demands:
        - Agent.Name -equals agent3
    steps:
    - script: echo "Pipeline failed! 🚨"
      displayName: "Notify Failure"
